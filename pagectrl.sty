\RequirePackage{expl3}
\ProvidesExplClass
{pagectrl}
{2014/12/09}
{1.0}
{Managing page requirements}

\NeedsTeXFormat{LaTeX2e}[1994/06/01]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Messages %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% #1: page minimum
% #2: page maximum
% #3: actual page length
\msg_new:nnnn { pagectrl } { invalid-length } {
  This~document~doesn't~meet~the~given~page~limits:~[#1,~#2]~(#3).
} {
  This~paper~must~have~a~minimum~of~#1~pages~and~a~maximum~of~#2~pages.~
  It~currently~has~#3~pages,~which~is~outside~of~this~range.
}

% #1: option given
% #2: value attempted
\msg_new:nnnn { pagectrl } { unknown-option } {
  I~don't~know~the~option~'#1=#2', so I'm going to ignore it.
} {
  Not~one~of~'min',~'max',~'range',~or~'report-as'.
}

% @todo Shove #2 into a clist and join with {~or~}{,~}{,~or~}
% #1: option given
% #2: value attempted
% #3: appropriate values
\msg_new:nnnn { pagectrl } { unknown-choice } {
  I~don't~know~the~option~'#1=#2'.
} {
  Not~one~of~#3.
}

% #1: page minimum
% #2: page maximum
\msg_new:nnnn { pagectrl } { invalid-bounds } {
  Invalid~page~bounds.
} {
  Note~that~the~minimum~cannot~be~greater~than~the~maximum:~[#1,~#2].
}

\msg_new:nnnn { pagectrl } { invalid-range } {
  Invalid~page~range.
} {
  Ensure~that~your~'range'~is~of~the~form~'range=min-max'.
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Key-Value Interface %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% The function by which to report any page limit errors (assuming
% correct syntax).  To work correctly, this must be an implemented
% message class.  See `l3msg' documentation and the implementation:
% <<reporting style implementation>>
\tl_new:N  \g_pagectrl_reporting_style_tl
\tl_set:Nn \g_pagectrl_reporting_style_tl { warning }

% The minimum and maximum number of pages allowed.  See
% \pagectrl_validate_bounds: for final usage.
\int_new:N  \g_pagectrl_min_pages_int
\int_set:Nn \g_pagectrl_min_pages_int { 0 }
\int_new:N  \g_pagectrl_max_pages_int
\int_set:Nn \g_pagectrl_max_pages_int { 9999 }

% Setup package interface
\keys_define:nn { pagectrl }
  {
    range  .code:n = {
      \seq_set_split:Nnn \l_tmpa_seq {-} {#1}
      \seq_pop_left:NN \l_tmpa_seq \l_tmpa_tl
      \seq_pop_left:NN \l_tmpa_seq \l_tmpb_tl
      \int_compare:nNnTF { \seq_count:N \l_tmpa_seq } = { 0 }
        {
          \int_gset:Nn \g_pagectrl_min_pages_int { \tl_use:N \l_tmpa_tl }
          \int_gset:Nn \g_pagectrl_max_pages_int { \tl_use:N \l_tmpb_tl }
        }
        {
          \msg_error:nnxx { pagectrl } { invalid-range }
            { \tl_use:N \l_tmpa_tl }
            { \tl_use:N \l_tmpb_tl }
        }
    },
%
%
    min .int_set:N = \g_pagectrl_min_pages_int,
    min .default:n = 0,
%
    max .int_set:N = \g_pagectrl_max_pages_int,
    max .default:n = 9999,
%
%
    report-as .choices:nn =
                    { error, warning, info }
                    {
                      \tl_gset:NV \g_pagectrl_reporting_style_tl
                                  \l_keys_choice_tl
                    },
    report-as / unknown .code:n =
      \msg_error:nnxxx { pagectrl } { unknown-choice }
        { report-as }
        { \exp_not:n {#1} }
        { error,~warning,~or~info },
%
%
    default .code:n = {
      \msg_info:nnxx { pagectrl }
                     { unknown-option }
                     { \l_keys_key_tl }
                     { \exp_not:n {#1} }
     },
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Private Functions %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Ensure that min <= max.  If not, error out.
\cs_new_protected:Npn \pagectrl_validate_bounds:
  {
    \int_compare:nNnT
      { \g_pagectrl_min_pages_int } > { \g_pagectrl_max_pages_int }
      {
        \msg_error:nnxx { pagectrl } { invalid-bounds }
          { \int_use:N \g_pagectrl_min_pages_int }
          { \int_use:N \g_pagectrl_max_pages_int }
      }
  }

% Report a page-limit error <<reporting style implementation>>
\cs_new_protected:Npn \__pagectrl_report_error:
  {
    \use:c { msg_ \tl_use:N \g_pagectrl_reporting_style_tl :nnxxx }
      { pagectrl } { invalid-length }
      { \int_use:N \g_pagectrl_min_pages_int }
      { \int_use:N \g_pagectrl_max_pages_int }
      { \thepage }
  }

% Report a page-limit error <<reporting style implementation>>
\cs_new_protected:Npn \__pagectrl_report_error_if:n #1
  {
    \bool_if:nT {#1}
      { \__pagectrl_report_error: }
  }

\cs_new_protected:Npn \pagectrl_error_if_under:
  {
    \__pagectrl_report_error_if:n
      { \int_compare_p:nNn { \thepage } < { \g_pagectrl_min_pages_int } }
  }

\cs_new_protected:Npn \pagectrl_error_if_over:
  {
    \__pagectrl_report_error_if:n
      { \int_compare_p:nNn { \thepage } > { \g_pagectrl_max_pages_int } }
  }

% Test if the document is within the page limits.
\cs_new_protected:Npn \pagectrl_finalize:
  {
    \pagectrl_error_if_under:
    \pagectrl_error_if_over:
  }

% @todo have macros \StartPageCount and \StopPageCount to limit scope.

\RequirePackage{l3keys2e}
\ProcessKeysOptions{ pagectrl }
\pagectrl_validate_bounds:

% Check page bounds for min/max
\AtEndDocument{ \pagectrl_finalize: }
